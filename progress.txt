-- CooperCone

I finished the connect header parsing to get https to work, but for 
some other reason, https requests aren't working yet. I'll take a look
at why sometime tomorrow.

Other than that, I also finished a few other header fields to get
http/1.1 to work, so most http websites will work now.

The next step probably is to get multiple connections working at the same time.

I'm using a makefile to build it. You can run make test to execute the test
script. Right now it has two tests in it, the first is to an http website,
and the other is to an https website. The https is commented out though.

There's another executable for a client, but I was using that to test it
right in the beginning. It doesn't do anything as of now. Let me know
if you have any questions.

-- ercprk (Nov 19th 22:49)

parseHeader() wasn't parsing the port correctly so I fixed that.

I made it so that the server can handle multiple clients. This was done through
the epoll API. I didn't change any of the program flow for handling a request
from a client; I simply ported them into a loop where it handles detection
from clients through the epoll instance. I used poll initially but learned that
epoll is quicker and has similar API.

All the changes were done in main(), except one line in parseHeader(). Macros
were added for MAX_EVENTS (for the max number of client requests to handle at a
time) and LOOP_SIZE (the outermost loop, should theoretically infinite, but for
developing purposes we can limit)

-- ercprk (Nov 22nd 15:43)

Changed indentation and limited (most) lines to 80. If you don't like 80-column
limit, feel free to change it! I'm still looking at the socket HTTPS

-- cooper (Nov 29th 12:44)

Added in support for https persistent connections.
I created a ConnectionData struct that stores a pair of sd's. When we get a
CONNECT call, I create a new ConnectionData that stores both the client and 
server sd's and add in the new server connection to the epollfd.
Now, when epoll tells us that a socket is ready to be read, we read from it
then check to see if it's in the connection data. If it is, we write to the
other socket in the pair and continue.

I also added in support for content-length encoding. This lets us use the
proxy in browsers like firefox for HTTP. Still working on HTTPS in browsers

-- cooper (Dec 1st 13:12)

Added in support for reused connections. We no longer close connections with
the clients or servers. When a client connects to a server, we first check
to see if we have an open connection with that server and reuse it if we do.
Added in a lot of stability. Strtok caused a lot of problems with header
parsing. Now, you can connect a browser to the proxy and it'll work reliably.
Next step is to make cache bigger, and make it better. I'll try to add in
content pre-fetching.

-- ercprk (Dec 2nd 19:44)

Added in the new implementation of age field addition. If there already is an
age field when the response adds in, we apply the age by subtracting it from
timeCreated in our cacheObj. For all writes back to the client, we add age field
at the end of the header, no matter what (i.e. even when we send it right from
the server).

-- cooper (Dec 3rd 11:49)

Added image pre-fetching. When we receive a GET request, we check to see if the
content returned is HTML. If it is, we search for img tags and send a GET 
request to the image servers so the client doesn't need to wait so long
before they get the images back. When the image servers respond, we cache the
content in another data structure and send them to the client when they ask.
Before we look for the img tags, we need to make sure the data isn't compressed.
If it's compressed with gzip, we uncompress it then search for the tags.
We don't handle any other compression techniques right now.

I also refactored some of the data we were storing. We had about 5 different
structs that were all linked lists with some data attached. They had different 
implementations of add, remove, find, and length. I changed this to 1 DataList
struct that stores a void* data field. Now the other structs only need to
handle creating and destroying themselves and comparison functions.
